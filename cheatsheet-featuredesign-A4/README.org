* CheatSheet: Feature Design For Job Interview                    :Interview:
:PROPERTIES:
:type:     interview
:export_file_name: cheatsheet-featuredesign-A4.pdf
:END:

#+BEGIN_HTML
<a href="https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-featuredesign-A4"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
<div id="the whole thing" style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>

<br/><br/>
<a href="http://makeapullrequest.com" target="_blank" rel="nofollow"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" alt="PRs Welcome"/></a>
#+END_HTML

- PDF Link: [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com/blob/master/cheatsheet-featuredesign-A4/cheatsheet-featuredesign-A4.pdf][cheatsheet-featuredesign-A4.pdf]], Category: [[https://cheatsheet.dennyzhang.com/category/interview/][interview]]
- Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-featuredesign-A4
- Related posts: [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]], [[https://cheatsheet.dennyzhang.com/cheatsheet-systemdesign-A4][CheatSheet: System Design For Job Interview]], [[https://github.com/topics/denny-cheatsheets][#denny-cheatsheets]]

File me [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com/issues][Issues]] or star [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com][this repo]].
** Top 20 Design Problems For Technical Modules
| Num | Name                                                       | Summary          |
|-----+------------------------------------------------------------+------------------|
|   1 | [[https://architect.dennyzhang.com/design-distributed-counter][Design a distributed counter]]                               | [[https://architect.dennyzhang.com/design-distributed-counter][link]], [[https://www.slideshare.net/kevinweil/rainbird-realtime-analytics-at-twitter-strata-2011/59-If_You_Only_Remember_One][link]]       |
|   2 | [[https://architect.dennyzhang.com/explain-delayedqueue][Delayed task scheduling]]                                    | [[https://architect.dennyzhang.com/explain-delayedqueue][link]]             |
|   3 | [[https://architect.dennyzhang.com/design-concurrent-hashmap][Design a thread-safe Hashmap]]                               | [[https://architect.dennyzhang.com/design-concurrent-hashmap][link]], [[https://www.geeksforgeeks.org/internal-working-of-hashmap-java/][link]]       |
|-----+------------------------------------------------------------+------------------|
|   4 | Design a distributed Hashmap                               |                  |
|   5 | Design a distributed UUID generator                        |                  |
|   6 | [[https://architect.dennyzhang.com/design-api-limiter/][Design An API Rate Limiter]]                                 | [[https://architect.dennyzhang.com/design-api-limiter/][link]], [[https://nordicapis.com/everything-you-need-to-know-about-api-rate-limiting/][link]], [[https://konghq.com/blog/how-to-design-a-scalable-rate-limiting-algorithm/][link]] |
|-----+------------------------------------------------------------+------------------|
|   7 | Design a distributed transaction                           |                  |
|   8 | Top URL hits                                               |                  |
|   9 | Unique url hits                                            |                  |
|  10 | Design a distributed transactions                          |                  |
|  11 | Design a load balancer                                     |                  |
|  12 | Design a client-server API to build a rich document editor |                  |
|  13 | Design online/offline status system                        |                  |
|  14 | Design a circuit breaker                                   |                  |
|  15 | Design a secrets management system                         |                  |
|  16 | Design data sync for a distributed system                  |                  |
|  17 | [[https://architect.dennyzhang.com/design-parkinglot/][Design: A Parking Lot Service]]                              | [[https://github.com/donnemartin/system-design-primer/blob/master/solutions/object_oriented_design/parking_lot/parking_lot.ipynb][link]]             |
|  18 | [[https://architect.dennyzhang.com/design-url-redirect/][Design: A URL Redirecting Feature]]                          |                  |
|  19 | Design a service auto-discovery feature                    |                  |
|-----+------------------------------------------------------------+------------------|
|  20 | Design A big file transfer feature                         |                  |
|  21 | TODO                                                       |                  |
#+TBLFM: $1=@-1$1+1;N
** Top 30 Concepts For Feature/System Design
| Num | Name                                    | Summary                                                             |
|-----+-----------------------------------------+---------------------------------------------------------------------|
|   1 | [[https://architect.dennyzhang.com/explain-cache][Caching]]                                 | Stores data so that future requests of data retrieval can be faster |
|   2 | [[https://architect.dennyzhang.com/explain-messagequeue][Message Queue]]                           | Provides an asynchronous communications protocol,                   |
|   3 | [[https://architect.dennyzhang.com/explain-partition][Data Partition & Sharding]]               | Break up a big data volume into many smaller parts                  |
|   4 | [[https://architect.dennyzhang.com/explain-indexing][DB Indexing]]                             | Create indexes on multiple columns to speed up table look up        |
|   5 | [[https://architect.dennyzhang.com/explain-db-replication][DB replication]]                          | Duplicate data to increase service availability                     |
|   6 | [[https://architect.dennyzhang.com/explain-cap][CAP: Consistency/Availability/Partition]] | A distributed database system can only have 2 of the 3              |
|   7 | [[https://architect.dennyzhang.com/explain-nosql][DB: SQL & NoSQL]]                         | Relational databases and non-relational databases                   |
|-----+-----------------------------------------+---------------------------------------------------------------------|
|   8 | [[https://architect.dennyzhang.com/explain-coordination][Concurrency & Communication]]             |                                                                     |
|   9 | [[https://architect.dennyzhang.com/explain-locks][Pessimistic And Optimistic Locking]]      |                                                                     |
|  10 | [[https://architect.dennyzhang.com/explain-eventualconsistency][Consistency Module]]                      | weak consistency, eventual consistency, strong consistency          |
|  11 | Conflict resolution                     | Quorum, vector lock, reconcile on read/write, CRDT                  |
|-----+-----------------------------------------+---------------------------------------------------------------------|
|  12 | [[https://architect.dennyzhang.com/explain-http][Networking: HTTP]]                        |                                                                     |
|  13 | [[https://architect.dennyzhang.com/explain-poll-push][Pull vs Push model]]                      |                                                                     |
|  14 | Garbage Collection                      |                                                                     |
|  15 | [[https://architect.dennyzhang.com/explain-memory-management][Memory Management]]                       |                                                                     |
|  16 | [[https://architect.dennyzhang.com/explain-heartbeat][Heartbeats]]                              |                                                                     |
|  17 | Self Protection                         | API Rate limit, [[https://en.wikipedia.org/wiki/Circuit_breaker][Circuit breaker]], [[https://en.wikipedia.org/wiki/Bulkhead_(partition)][bulkhead]], throttling               |
|  18 | Filesystem                              |                                                                     |
|  19 | API: gRPC vs REST                       |                                                                     |
|  20 | [[https://architect.dennyzhang.com/explain-loadbalancer][Load balancer]]                           |                                                                     |
|  21 | Scale up vs Scale out                   | Vertical scaling and Horizontal scaling                             |
|  22 | API Design                              |                                                                     |
|  23 | [[https://architect.dennyzhang.com/explain-session][Session management]]                      |                                                                     |
|  24 | Networking: TCP vs UDP                  |                                                                     |
|  25 | Consistency patterns                    | Weak consistency, Eventual consistency, Strong consistency          |
|  26 | Availability patterns                   | Fail-over vs Replication                                            |
|  27 | CDN - Content Delivery Network          | Edge caching                                                        |
|  28 | [[https://architect.dennyzhang.com/explain-monitoring][Monitoring]]                              |                                                                     |
|  29 | Security                                |                                                                     |
|  30 | [[https://architect.dennyzhang.com/explain-dns][Networking: DNS]]                         |                                                                     |
#+TBLFM: $1=@-1$1+1;N

#+BEGIN_HTML
<a href="https://cheatsheet.dennyzhang.com"><img align="right" width="185" height="37" src="https://raw.githubusercontent.com/dennyzhang/cheatsheet.dennyzhang.com/master/images/cheatsheet_dns.png"></a>
#+END_HTML
** Advanced Data Structure & Algorithms
| Num | Name                                      | Summary                                                                     |
|-----+-------------------------------------------+-----------------------------------------------------------------------------|
|   1 | [[https://architect.dennyzhang.com/explain-consistent-hash][Consistent Hash]]                           |                                                                             |
|   2 | [[https://architect.dennyzhang.com/explain-delayedqueue][Delayed queue]]                             | Run scheduled tasks                                                         |
|   3 | [[https://architect.dennyzhang.com/explain-bloomfilter][Bloom filter]]                              | A space-effcient query returns either "possibly in set" or "definitely not" |
|-----+-------------------------------------------+-----------------------------------------------------------------------------|
|   4 | [[https://architect.dennyzhang.com/explain-gossip][Gossip]]                                    | Propagate cluster status                                                    |
|   5 | [[https://en.wikipedia.org/wiki/Two-phase_commit_protocol][Two-phase commit]]/[[https://en.wikipedia.org/wiki/Three-phase_commit_protocol][Three-phase commit]]       |                                                                             |
|   6 | [[https://architect.dennyzhang.com/explain-sstable][SSTable (Sorted Strings Table)]]            |                                                                             |
|   7 | [[https://architect.dennyzhang.com/explain-lsm][LSM (Log Structured Merge Trees)]]          |                                                                             |
|   8 | B+ Tree                                   |                                                                             |
|-----+-------------------------------------------+-----------------------------------------------------------------------------|
|   9 | [[https://architect.dennyzhang.com/explain-crdts][CRDT(Conflict-Free Replicated Data Types)]] |                                                                             |
|  10 | [[https://architect.dennyzhang.com/explain-vector-clocks][Vector Clocks/Version Vectors]]             |                                                                             |
|  11 | [[https://architect.dennyzhang.com/design-explain-paxos][Paxos and raft protocol]]                   |                                                                             |
|  12 | Merkle Tree                               |                                                                             |
#+TBLFM: $1=@-1$1+1;N

[[image-blog:CheatSheet: Feature Design For Job Interview][https://raw.githubusercontent.com/dennyzhang/cheatsheet.dennyzhang.com/master/cheatsheet-featuredesign-A4/dynamo-summary.png]]
** Explain workflow: What happens when XXX?
| Num | Name                                  | Summary |
|-----+---------------------------------------+---------|
|   1 | When happens when I search in google? |         |
|   2 | How loadbalancer works                |         |
|   3 | Explain three phase commit model      |         |
|   4 | Explain HTTP return code              |         |
|   5 | Explain Mysql DB replication model    |         |
|   6 | Explain gossip protocol               |         |
|   7 | [[https://architect.dennyzhang.com/explain-cap][Explain CAP]]                           |         |
|   8 | Explain Hadoop file system            |         |
#+TBLFM: $1=@-1$1+1;N
** Explain tools: how XXX supports XXX?
| Num | Name                                  | Summary |
|-----+---------------------------------------+---------|
|   1 | How JDK implement hashmap?            |         |
|   2 | Explain java garbage collection model |         |
|   3 | Explain raft/etcd                     |         |
|   4 | How OS supports XXX?                  |         |
#+TBLFM: $1=@-1$1+1;N
** Cloud Design Principles
| Num | Name                       | Summary                 |
|-----+----------------------------+-------------------------|
|   1 | Fail fast                  |                         |
|   2 | Design for failure         |                         |
|   3 | Immutable infrastructure   |                         |
|   4 | [[https://www.engineyard.com/blog/pets-vs-cattle][Cats vs Cattle]]             | Avoid snowflake servers |
|   5 | [[https://docs.microsoft.com/en-us/azure/architecture/guide/design-principles/self-healing][Auto healing]]               |                         |
|   6 | Async programming          |                         |
|   7 | GitOps operational model   |                         |
|   8 | Event-Driven Architectures |                         |
#+TBLFM: $1=@-1$1+1;N

** Cloud Design Patterns
| Num | Name                        | Summary                                                                 |
|-----+-----------------------------+-------------------------------------------------------------------------|
|   1 | [[https://docs.microsoft.com/en-us/azure/architecture/patterns/ambassador][Ambassador pattern]]          | Create helper service to send network requests, besides the main sevice |
|   2 | [[https://docs.microsoft.com/en-us/azure/architecture/patterns/cache-aside][Cache-Aside pattern]]         | Load data on demand into a cache from a data store                      |
|   3 | [[https://docs.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker][Circuit Breaker pattern]]     | If a request takes too many reousrce, abort it                          |
|   4 | [[https://docs.microsoft.com/en-us/azure/architecture/patterns/bulkhead][Bulkhead pattern]]            | Isolate elements into pools, so that one fire won't burn all            |
|   5 | [[https://docs.microsoft.com/en-us/azure/architecture/patterns/gateway-aggregation][Gateway Aggregation pattern]] | Aggregate multiple individual requests into a single request            |
|   6 | [[https://docs.microsoft.com/en-us/azure/architecture/patterns/priority-queue][Priority Queue pattern]]      | Support different SLAs for different individual clients                 |
|   7 | [[https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler][Strangler pattern]]           | Incrementally migrate a legacy system piece by piece                    |
#+TBLFM: $1=@-1$1+1;N
#+BEGIN_HTML
<a href="https://cheatsheet.dennyzhang.com"><img align="right" width="185" height="37" src="https://raw.githubusercontent.com/dennyzhang/cheatsheet.dennyzhang.com/master/images/cheatsheet_dns.png"></a>
#+END_HTML

** Misc
| Num | Name                                                                            | Summary                           |
|-----+---------------------------------------------------------------------------------+-----------------------------------|
|   1 | How to store 2TB data into 3 disks of 1TB. And be tolerant for one disk failure | A, B, C. And C = A XOR B          |
|   2 | Find out the difference between two files. Majority of these two are the same   | [[https://code.dennyzhang.com/followup-lcs][#lcs - Longest Common Subsequence]] |
|   3 | How to support feature of "diff 1.txt 2. txt"                                   |                                   |
|   4 | Avoid double payment in a distributed payment system                            | [[https://medium.com/airbnb-engineering/avoiding-double-payments-in-a-distributed-payments-system-2981f6b070bb][link]]                              |
#+TBLFM: $1=@-1$1+1;N
** Top 20 Object-Oriented Design Problems
| Num | Problem                         | Category/Tag           | Example                                                                            |
|-----+---------------------------------+------------------------+------------------------------------------------------------------------------------|
|   1 | Cache                           | [[https://code.dennyzhang.com/review-linkedlist][#linkedlist]], [[https://code.dennyzhang.com/review-oodesign][#oodesign]] | [[https://code.dennyzhang.com/lru-cache][Leetcode: LRU Cache]], [[https://code.dennyzhang.com/lfu-cache][Leetcode: LFU Cache]], [[https://code.dennyzhang.com/all-oone-data-structure][Leetcode: All O`one Data Structure]]       |
|   2 | Throttling                      | [[https://code.dennyzhang.com/review-linkedlist][#linkedlist]], [[https://code.dennyzhang.com/review-oodesign][#oodesign]] | [[https://code.dennyzhang.com/design-hit-counter][Leetcode: Design Hit Counter]], [[https://code.dennyzhang.com/logger-rate-limiter][Leetcode: Logger Rate Limiter]]                        |
|   3 | Iterator                        | [[https://code.dennyzhang.com/review-oodesign][#oodesign]]              | [[https://code.dennyzhang.com/binary-search-tree-iterator][Leetcode: Binary Search Tree Iterator]], [[https://code.dennyzhang.com/design-compressed-string-iterator][Leetcode: Design Compressed String Iterator]] |
|   4 | Design Log Storage System       | [[https://code.dennyzhang.com/review-oodesign][#oodesign]]              | [[https://code.dennyzhang.com/design-log-storage-system][Leetcode: Design Log Storage System]]                                                |
|   5 | Linked List with random access  | [[https://code.dennyzhang.com/review-oodesign][#oodesign]]              | [[https://code.dennyzhang.com/design-linked-list][Leetcode: Design Linked List]]                                                       |
|   6 | Max Stack                       | [[https://code.dennyzhang.com/review-stack][#stack]] , [[https://code.dennyzhang.com/review-oodesign][#oodesign]]     | [[https://code.dennyzhang.com/max-stack][Leetcode: Max Stack]]                                                                |
|   7 | Design HashMap                  | [[https://code.dennyzhang.com/review-oodesign][#oodesign]]              | [[https://code.dennyzhang.com/design-hashmap][Leetcode: Design HashMap]]                                                           |
|   8 | Circular Queue                  | [[https://code.dennyzhang.com/review-oodesign][#oodesign]]              | [[https://code.dennyzhang.com/design-circular-queue][Leetcode: Design Circular Queue]], [[https://code.dennyzhang.com/design-circular-deque][Leetcode: Design Circular Deque]]                   |
|   9 | Trie tree                       | [[https://code.dennyzhang.com/review-oodesign][#oodesign]]              | [[https://code.dennyzhang.com/implement-trie-prefix-tree][Leetcode: Implement Trie (Prefix Tree)]]                                             |
|  10 | Get Median                      | [[https://code.dennyzhang.com/review-oodesign][#oodesign]]              | [[https://code.dennyzhang.com/find-median-from-data-stream][Leetcode: Find Median from Data Stream]]                                             |
|  11 | Range Sum Query                 | [[https://code.dennyzhang.com/review-oodesign][#oodesign]]              | [[https://code.dennyzhang.com/range-sum-query-mutable][Leetcode: Range Sum Query - Mutable]], [[https://code.dennyzhang.com/range-sum-query-immutable][Leetcode: Range Sum Query - Immutable]]         |
|  12 | Design File System              | [[https://code.dennyzhang.com/review-oodesign][#oodesign]]              | [[https://code.dennyzhang.com/design-file-system][Leetcode: Design File System]]                                                       |
|  13 | Insert Delete GetRandom O(1)    | [[https://code.dennyzhang.com/review-oodesign][#oodesign]], [[https://code.dennyzhang.com/review-random][#random]]     | [[https://code.dennyzhang.com/insert-delete-getrandom-o1][Leetcode: Insert Delete GetRandom O(1)]]                                             |
|  14 | Insert Delete GetRandom O(1) II | [[https://code.dennyzhang.com/review-oodesign][#oodesign]], [[https://code.dennyzhang.com/review-random][#random]]     | [[https://code.dennyzhang.com/insert-delete-getrandom-o1-duplicates-allowed][Leetcode: Insert Delete GetRandom O(1) - Duplicates allowed]]                        |
#+TBLFM: $1=@-1$1+1;N
** More Resources
License: Code is licensed under [[https://www.dennyzhang.com/wp-content/mit_license.txt][MIT License]].

https://github.com/donnemartin/system-design-primer

https://github.com/checkcheckzz/system-design-interview

https://github.com/binhnguyennus/awesome-scalability

https://docs.microsoft.com/en-us/azure/architecture/patterns/
#+BEGIN_HTML
<a href="https://cheatsheet.dennyzhang.com"><img align="right" width="201" height="268" src="https://raw.githubusercontent.com/USDevOps/mywechat-slack-group/master/images/denny_201706.png"></a>

<a href="https://cheatsheet.dennyzhang.com"><img align="right" src="https://raw.githubusercontent.com/dennyzhang/cheatsheet.dennyzhang.com/master/images/cheatsheet_dns.png"></a>
#+END_HTML
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-featuredesign-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-featuredesign-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-slack-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-featuredesign-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO How to implement "git diff"                                 :noexport:
* TODO How to transfer 2 TB data across regions                    :noexport:
* TODO What's raid?                                                :noexport:
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO multiple threading                                          :noexport:
第一题find largest subarray秒,之后问用2个线程怎么做,4个线程怎么优化...
* TODO Difference between: threading/process/goroutine             :noexport:
* TODO How to design SNS system: twitter/youtube/uber              :noexport:
* TODO 对每个题目找工业界实现的blog                                :noexport:
https://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=543700&highlight=design

授之以渔:

对每家onsite的公司 -> 在地里翻完最近两年所有onsite面筋aggregate所有design题目 -> 对每个题目找工业界实现的blog -> 阅读每个blog,选中最好的一到两个 -> 读到烂熟,整理出我当面试官的话会问的所有问题不停考自己 -> 白板英文自行mock 3遍 -> over

举个栗子:
面试lyft -> lyft喜欢考payment system -> google之 -> uber有个分布式的实现,不怎么详细,airbnb有个非常详细的SQL sharding的实现,很详细在它的blog上,采用
然后lyft onsite果然考了,秒了
* TODO caching system                                              :noexport:
* TODO 3-way merge                                                 :noexport:
* Grokking the System Design                                       :noexport:
https://www.educative.io/courses/grokking-the-system-design-interview
https://www.educative.io/courses/grokking-the-object-oriented-design-interview
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO discussed various sharding approaches                       :noexport:
* TODO 脸书和谷歌的推荐系统相关的paper一般含金量都很高             :noexport:
* TODO hadoop, spark, storm                                        :noexport:
* TODO 微信的@功能,设计个分组可见功能                             :noexport:
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO privacy policy design                                       :noexport:
https://www.1point3acres.com/bbs/thread-301250-1-1.html
https://termly.io/resources/articles/privacy-by-design/
https://www.privacytrust.com/gdpr/privacy-by-design-gdpr.html
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO How to caculate availability                                :noexport:
Availability in parallel vs in sequence
If a service consists of multiple components prone to failure, the service's overall availability depends on whether the components are in sequence or in parallel.

In sequence
Overall availability decreases when two components with availability < 100% are in sequence:

Availability (Total) = Availability (Foo) * Availability (Bar)
If both Foo and Bar each had 99.9% availability, their total availability in sequence would be 99.8%.

In parallel
Overall availability increases when two components with availability < 100% are in parallel:

Availability (Total) = 1 - (1 - Availability (Foo)) * (1 - Availability (Bar))
If both Foo and Bar each had 99.9% availability, their total availability in parallel would be 99.9999%.
* TODO Merkle Tree                                                 :noexport:
大名鼎鼎的merkle tree.是个perfect的二叉树.每个节点是hash（左孩子的hash,右孩子的hash）.除了最底层的leaf.leaf node的值就是hash（data block）

Merkle Tree的特点使得我们需要Partition 3的操作:先把key range分bucket.否则一旦有新的node加入进来,在转移data的同时,我们需要扫描data,重新进行hash的计算,因为data partitioning和merkle tree的key range partitioning并不一致.而如果我们通过分bucket让他们保持一致,则只需要把merkle tree的一部分子树转移到另一个节点上,并重新计算一下向上的根结点的hash就可以了.
* TODO Network security: cookie attack                             :noexport:
use forged cookies to log in without a password
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO online rolling upgrade for mysql DB schema                  :noexport:
* TODO Garbage Collection                                          :noexport:
https://rushter.com/blog/python-garbage-collector/
https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals
* TODO currency Model                                              :noexport:
* TODO How Slack works: https://www.youtube.com/watch?v=WE9c9AZe-DY :noexport:
* TODO https://techcrunch.com/2012/04/12/how-to-scale-a-1-billion-startup-a-guide-from-instagram-co-founder-mike-krieger/ :noexport:
* TODO Deep dive into lisp language implementation                 :noexport:
* TODO Security: SAML and LDAP external IDP's                      :noexport:
* TODO Security: certicate rotation                                :noexport:
* TODO Compliance standards: FIPS,  PCI/DSS                        :noexport:
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO What to do when service is overloaded?                      :noexport:
- Scaling up/out
- Throttling
  drop clients: api limits
  drop features: bulkhead
  drop requests: circuit breaker
* TODO Realtime Analytics at Twitter                               :noexport:
https://www.slideshare.net/kevinweil/rainbird-realtime-analytics-at-twitter-strata-2011/8-And_My_Personal_Favorite
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO VM live migration                                           :noexport:
* TODO memory ballooing                                            :noexport:
* TODO Cassandra vs MongoDB                                        :noexport:
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* HALF Reliability vs Availability                                 :noexport:
- By definition, reliability is the probability a system will fail in a given period.
- By definition, availability is the time a system remains operational to perform its required function in a specific period


If a system is reliable, it is available. However, if it is available, it is not necessarily reliable.

Let's take the example of an online retail store that has 99.99%
availability for the first two years after its launch. However, the
system was launched without any information security testing. The
customers are happy with the system, but they don't realize that it
isn't very reliable as it is vulnerable to likely risks. In the third
year, the system experiences a series of information security
incidents that suddenly result in extremely low availability for
extended periods of time. This results in reputational and financial
damage to the customers.
* TODO How to define SLA?                                          :noexport:
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO Pod creation process                                        :noexport:
* TODO VM creation process                                         :noexport:
* TODO Why it's called reverse proxy                               :noexport:
A reverse proxy retrieves resources on behalf of a client from one or more servers. These resources are then returned to the client, appearing as if they originated from the proxy server itself.
* TODO misc: Additional Blocks For Feature/System Design           :noexport:
| Num | Name                                     | Summary |
|-----+------------------------------------------+---------|
|   2 | [[https://architect.dennyzhang.com/explain-split-brain][Split brain]]                              |         |
|   3 | Sloppy Quorum and hinted handoff         |         |
|   4 | Networking: SDN                          |         |
#+TBLFM: $1=@-1$1+1;N
* TODO How golang implement hashmap?                               :noexport:
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO 3-way merge                                                 :noexport:
https://neil.fraser.name/writing/sync/

Client, Server, Base v1 -> Base v2


Three-way merges are found in Subversion,[?] the Mjølner Project[?] and many other products. An overview of the process is:

The client sends the contents of the document to the server.
The server performs a three-way merge to extract the user's changes and merge them with changes from other users.
The server sends a new copy of the document to the client.
