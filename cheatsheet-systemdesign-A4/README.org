* CheatSheet: System Design For Code Interview                    :Interview:
:PROPERTIES:
:type:     language
:export_file_name: cheatsheet-systemdesign-A4.pdf
:END:

#+BEGIN_HTML
<a href="https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-systemdesign-A4"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>
<div id="the whole thing" style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/slack.png" alt="slack"/></a></div>
</div>

<br/><br/>
<a href="http://makeapullrequest.com" target="_blank" rel="nofollow"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" alt="PRs Welcome"/></a>
#+END_HTML

- PDF Link: [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com/blob/master/cheatsheet-behavior-A4/cheatsheet-behavior-A4.pdf][cheatsheet-behavior-A4.pdf]], Category: [[https://cheatsheet.dennyzhang.com/category/interview/][interview]]
- Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-systemdesign-A4
- Related posts: [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]], [[https://github.com/topics/denny-cheatsheets][#denny-cheatsheets]]

File me [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com/issues][Issues]] or star [[https://github.com/dennyzhang/cheatsheet.dennyzhang.com][this repo]].

** Process Of System Design
| Num | Name                                         | Summary                                               |
|-----+----------------------------------------------+-------------------------------------------------------|
|   1 | List use cases: List major and focus on some | Good sense. The questions you asked define your level |
|   2 | Understand scale: *Data* + *Traffic*         | Estimate the volume of the problem space              |
|   3 | Abstract design                              |                                                       |
|   4 | Bottlenecks: *Key challenges* + *Trade-Offs* | Valid reasoning is the key                            |
|   5 | Scale your design                            |                                                       |
#+TBLFM: $1=@-1$1+1;N

** Engineering Of Well-Known Products
| Name          | Summary                                                  |
|---------------+----------------------------------------------------------|
| Google        | [[http://highscalability.com/google-architecture][Link: Google Architecture]]                                |
| Facebook      | [[http://highscalability.com/blog/2016/6/27/how-facebook-live-streams-to-800000-simultaneous-viewers.html][Link: Facebook Live Streams]]                              |
| Twitter       | [[http://highscalability.com/blog/2016/4/20/how-twitter-handles-3000-images-per-second.html][Link: Twitter Image Service]], [[https://www.infoq.com/presentations/Twitter-Timeline-Scalability/][YouTube: Timelines at Scale]] |
| Uber          | [[http://highscalability.com/blog/2016/10/12/lessons-learned-from-scaling-uber-to-2000-engineers-1000-ser.html][Link: Lessons Learned From Scaling Uber]]                  |
| Tumblr        | [[http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html][Link: Tumblr Architecture]]                                |
| StackOverflow | [[http://highscalability.com/blog/2009/8/5/stack-overflow-architecture.html][Link: Stack Overflow Architecture]]                        |

** Classic Design Problems - Design Business Features                                
| Num | Name                                       | Summary |
|-----+--------------------------------------------+---------|
|   1 | [[https://architect.dennyzhang.com/design-url-redirect/][Design: TinyURL - A URL Shorterner Service]] |         |
|   2 | Design news feed                           |         |
|   3 | Design web crawler                         |         |
|-----+--------------------------------------------+---------|
|   4 | Google autocomplete                        |         |
|   5 | [[https://architect.dennyzhang.com/design-parkinglot/][Design: A Parking Lot Service]]              |         |
|   6 | [[https://architect.dennyzhang.com/design-elevator/][Design: An Elevator Service]]                |         |
|   7 | [[https://architect.dennyzhang.com/design-url-redirect/][Design: A URL Redirecting Feature]]          |         |
|   8 | Design Google PageRank                     |         |
#+TBLFM: $1=@-1$1+1;N

** Classic Design Problems - Design A Complex Product
- Think through the complicated, high-scale systems that you already use every day
| Num | Name                              | Summary |
|-----+-----------------------------------+---------|
|   1 | [[https://architect.dennyzhang.com/design-uber/][Design: Uber Backend]]              |         |
|   2 | Design K/V DB                     |         |
|   3 | [[https://architect.dennyzhang.com/design-google-suggestion/][Design: Google Suggestion Service]] |         |
|   4 | Design twitter                    |         |
|   5 | Deisgn a payment processor        |         |
|   6 | Design a voice conference system  |         |
|   7 | Design google doc                 |         |
|   8 | Design gmail                      |         |
#+TBLFM: $1=@-1$1+1;N
#+BEGIN_HTML
<a href="https://cheatsheet.dennyzhang.com"><img align="right" width="185" height="37" src="https://raw.githubusercontent.com/dennyzhang/cheatsheet.dennyzhang.com/master/images/cheatsheet_dns.png"></a>
#+END_HTML

** Classic Design Problems - Design Technical Modules
| Num | Name                                                       | Summary    |
|-----+------------------------------------------------------------+------------|
|   1 | Design a distributed UUID generator                        |            |
|   2 | [[https://architect.dennyzhang.com/design-api-limiter/][Design An API Rate Limiter]]                                 | [[https://nordicapis.com/everything-you-need-to-know-about-api-rate-limiting/][link]], [[https://konghq.com/blog/how-to-design-a-scalable-rate-limiting-algorithm/][link]] |
|   3 | Design a circuit breaker                                   |            |
|   4 | Design a stack supporting push/pop/getmin/getmostfrequent  |            |
|   5 | Implement a timer                                          |            |
|   6 | Thread-safe Hashmap                                        |            |
|   7 | Top URL hits                                               |            |
|   8 | Unique url hits                                            |            |
|   9 | Delayed task scheduling                                    |            |
|  10 | Design a client-server API to build a rich document editor |            |
#+TBLFM: $1=@-1$1+1;N

** Classic Design Problems - Explain workflow: What happens when XXX?
| Num | Name                                  | Summary                     |
|-----+---------------------------------------+-----------------------------|
|   1 | When happens when I search in google? |                             |
|   2 | How loadbalancer works                |                             |
|   3 | Explain three phase commit model      |                             |
|   4 | Explain HTTP return code              | 301 vs 302, 401 vs 403, etc |
|   5 | Explain mysql DB replication model    |                             |
|   6 | Explain Mysql replication mechanism   |                             |
|   7 | Explain gossip protocol               |                             |
|   8 | Explain CAP                           |                             |
#+TBLFM: $1=@-1$1+1;N

** Classic Design Problems - Explain tools: how XXX supports XXX?
| Num | Name                                  | Summary |
|-----+---------------------------------------+---------|
|   1 | How JDK implement hashmap?            |         |
|   2 | Explain java garbage collection model |         |
|   3 | Explain raft/etcd                     |         |
#+TBLFM: $1=@-1$1+1;N

** Classic Design Problems - Big Data
| Num | Name                                                          | Summary      |
|-----+---------------------------------------------------------------+--------------|
|   1 | Reservoir sampling                                            |              |
|   2 | Frequency estimation                                          |              |
|   3 | Heavy hitters - Find top k frequent items in a data stream    |              |
|   4 | Membership query - whether an element exists in a data stream | [[https://en.wikipedia.org/wiki/Bloom_filter][bloom filter]] |
|   5 | Get median from an endless data stream                        |              |
#+TBLFM: $1=@-1$1+1;N

** Typical Tech Areas
| Num | Summary                            |
|-----+------------------------------------|
|   1 | Distributed Database               |
|   2 | Task scheduling                    |
|   3 | LCM - life cycle management        |
|   4 | Logging & Monitoring               |
|   5 | Security                           |
|   6 | SDDC - Software defined datacenter |
#+TBLFM: $1=@-1$1+1;N

** Grow Design Expertise In Daily Work
| Num | Name                    | Summary                                                                                        |
|-----+-------------------------+------------------------------------------------------------------------------------------------|
|   1 | Products under the hood | Complicated and high-scale systems which you might use every day                               |
|   2 | Read engineering blogs  | Especially for big companies                                                                   |
|   3 | Tools under the hood    | Common tools/frameworks                                                                        |
|   4 | Try tools               | Use cases; Alternatives; Pros and Cons                                                         |
|   5 | Read papers             |                                                                                                |
|   6 | Try new things          | Keep researching the alternatives to a technology. e.g, rabbitmq vs kafaka, memcached vs redis |
#+TBLFM: $1=@-1$1+1;N
** Engineering Blogs/Websites
| Name                 | Summary                                                                        |
|----------------------+--------------------------------------------------------------------------------|
| Compnay Tech Blog    | [[https://www.facebook.com/pg/Engineering/notes/][Website: Facebook Engineering]], [[https://developers.googleblog.com][Website: Google Developers]]                      |
| Compnay Tech Blog    | [[https://medium.com/netflix-techblog][Medium: Netflix Blog]], [[https://medium.com/airbnb-engineering][Medium: Airbnb Engineering & Data Science]]                |
| Individual Tech Blog | [[https://www.allthingsdistributed.com][Blog: All Things Distributed - Amazon CTO]], [[http://highscalability.com/][Blog: highscalability]]               |
| Website              | [[https://interviewing.io][Website: interviewing.io]], [[https://www.interviewbit.com/courses/system-design/][Website: interviewbit.com]]                            |
| Website              | [[https://www.hiredintech.com/app#system-design][Website: hiredintech - System Design]], [[https://github.com/donnemartin/system-design-primer/tree/master/solutions/system_design][Github: system-design-primer]]             |
| YouTube              | [[https://www.youtube.com/watch?v=ZgdS0EUmn70][YouTube: Intro to Architecture and Systems Design Interviews]]                   |
| YouTube              | [[https://www.youtube.com/channel/UC-vYrOAmtrx9sBzJAf3x_xw/featured][YouTube Channel: Success in Tech]], [[https://www.youtube.com/watch?v=-W9F__D3oY4&feature=youtu.be][YouTube: Scalability Harvard Web Development]] |
| Reference            | [[https://www.facebook.com/careers/life/preparing-for-your-software-engineering-interview-at-facebook/][Link: Preparing for your Software Engineering Interview at Facebook]]            |
| Reference            | [[https://www.hiredintech.com/classrooms/system-design/lesson/55][Link: The System Design Process]]                                                |
| Cheatsheet           | [[https://code.dennyzhang.com/review-oodesign][Code problems for #oodesign]], [[https://cheatsheet.dennyzhang.com/cheatsheet-systemdesign-A4][CheatSheet: System Design For Code Interview]]      |
| Cheatsheet           | [[https://cheatsheet.dennyzhang.com/cheatsheet-leetcode-A4][CheatSheet: Leetcode For Code Interview]]                                        |
| Cheatsheet           | [[https://cheatsheet.dennyzhang.com/cheatsheet-behavior-A4][CheatSheet: Behavior Questions For Coder Interview]]                             |

#+BEGIN_HTML
<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ac&ref=qf_sp_asin_til&ad_type=product_link&tracking_id=dennyzhang-20&marketplace=amazon&region=US&placement=B06XPJML5D&asins=B06XPJML5D&linkId=9688cd3adb81a953935114b68a65989e&show_border=false&link_opens_in_new_window=false&price_color=333333&title_color=0066c0&bg_color=ffffff">
</iframe>
#+END_HTML


** More Resources
License: Code is licensed under [[https://www.dennyzhang.com/wp-content/mit_license.txt][MIT License]].

https://github.com/binhnguyennus/awesome-scalability

#+BEGIN_HTML
<a href="https://cheatsheet.dennyzhang.com"><img align="right" width="201" height="268" src="https://raw.githubusercontent.com/USDevOps/mywechat-slack-group/master/images/denny_201706.png"></a>

<a href="https://cheatsheet.dennyzhang.com"><img align="right" src="https://raw.githubusercontent.com/dennyzhang/cheatsheet.dennyzhang.com/master/images/cheatsheet_dns.png"></a>
#+END_HTML
* org-mode configuration                                           :noexport:
#+STARTUP: overview customtime noalign logdone showall
#+DESCRIPTION:
#+KEYWORDS:
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-systemdesign-A4}{GitHub: https://github.com/dennyzhang/cheatsheet.dennyzhang.com/tree/master/cheatsheet-systemdesign-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com/cheatsheet-slack-A4}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-systemdesign-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:
#+LINK_HOME:
* TODO [经验总结] 关于所谓的System Design: https://www.1point3acres.com/bbs/thread-169343-1-1.html :noexport:
* TODO [题目讨论] 系统设计问题/面试题总结: https://www.1point3acres.com/bbs/thread-541834-1-1.html :noexport:
* TODO System design: https://www.1point3acres.com/bbs/forum-323-1.html :noexport:
* TODO system design: https://www.1point3acres.com/bbs/thread-171320-1-1.html :noexport:
* design                                                           :noexport:
- work through the workflow
* TODO https://www.1point3acres.com/bbs/forum-323-1.html           :noexport:
* TODO 设计ip cache缓存之类的                                      :noexport:
* [#A] soulmachine系统设计(System Design) https://soulmachine.gitbooks.io/system-design/content/cn/distributed-id-generator.html :noexport:
* TODO https://www.hiredintech.com/app#system-design               :noexport:
* TODO news feed: https://36kr.com/p/201758                        :noexport:
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO design twitter                                              :noexport:
https://medium.com/@narengowda/system-design-for-twitter-e737284afc95
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO Kafka vs Rabbitmq                                           :noexport:
* system design                                                    :noexport:
https://www.facebook.com/careers/life/preparing-for-your-software-engineering-interview-at-facebook/
The purpose of the interview is to assess the candidate's ability to solve a non-trivial engineering design problem. 

There are two types of design interviews: systems design and product design.

Start with requirements: Your interviewer might ask: "How would you architect the backend for a messaging system?" Obviously this question is extremely vague. Where do you even start? You could start with some requirements:
How many users are we talking about here?
How many messages sent?
How many messages read?
What are the latency requirements for sender->receiver message delivery?
How are you going to store messages?
What operations does this data store need to support?
What operations is it optimized for?
How do you push new messages to clients? Do you push at all, or rely on a pull based model?
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO What's your own familiar area? expertise?                   :noexport:
* TODO What Complex products you have designed before?             :noexport:
Reflect on your projects: Think about the projects you've built. What was easy, and what was difficult?

List your projects
List good improvements/tech challenges/open issues
* TODO How to structurally analyize a product                      :noexport:
- Feature/Use case
- How to avoid abuse?
- How to support different version?
- Upgrade workflow
* TODO https://github.com/shishan100/Java-Interview-Advanced       :noexport:
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO cross dataset sync                                          :noexport:
* TODO Read links                                                  :noexport:
http://highscalability.com/blog/2011/11/29/datasift-architecture-realtime-datamining-at-120000-tweets-p.html
https://www.youtube.com/watch?v=w5WVu624fY8
https://www.youtube.com/watch?v=5cKTP36HVgI
http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html
http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html
http://highscalability.com/plentyoffish-architecture
http://highscalability.com/blog/2016/6/15/the-image-optimization-technology-that-serves-millions-of-re.html
http://highscalability.com/blog/2017/10/23/one-model-at-a-time-integrating-and-running-deep-learning-mo.html
http://highscalability.com/blog/2009/8/6/an-unorthodox-approach-to-database-design-the-coming-of-the.html
* TODO Scalability for Dummies                                     :noexport:
https://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones
https://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database
https://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache
https://www.lecloud.net/post/9699762917/scalability-for-dummies-part-4-asynchronism
* Understand big IT corps in US                                    :noexport:
https://www.1point3acres.com/bbs/thread-169418-1-1.html
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO design k/v db store                                         :noexport:
* TODO 某建筑有五十层高,打算装俩电梯,设计该电梯系统                :noexport:
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO How to implement a singleton                                :noexport:
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* TODO design uber                                                 :noexport:
http://systemdesigns.blogspot.com/2015/12/design-uber.html
